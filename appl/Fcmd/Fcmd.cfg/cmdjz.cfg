sub cmd_window(String file1, String file2) {
  ##start starts an command process without feedback without waiting.
  ##cmd.exe is the exe which is started in the command process, without feedback, without a window (in a java process shell).
  ## /C start cmd.exe is executed in the non-visible java process shell and starts a visible window.
  start cmd.exe /C start cmd.exe;
}


sub cmd_gitWindow(String file1, String file2) {
  ##unix_window.bat invokes sh.exe with environment variable. 
  ## start with an own command window. Therefore start cmd.exe
  start cmd.exe /C start cmd.exe /C git_window.bat;
}

sub cmd_cygwinWindow(String file1, String file2) {
  ##unix_window.bat invokes sh.exe with environment variable. 
  ## start with an own command window. Therefore start cmd.exe
  start cmd.exe /C start cmd.exe /C cygwin_window.bat;
}

sub cmd_unixScript(String file1, String file2) {
  ##
  start cmd.exe /C unix_cmd.bat <:>"<&file1>"<.> <:>"<&file2>"<.>;
}

sub cmd_batchExec(Filepath file1, Filepath file2) {
  ##cmd cmd.exe /C start cmd.exe /C dj.bat <:>"<&file1>"<.> <:>"<&file2>"<.>;
  start cmd.exe /C start cmd.exe /K <:>"<&file1.namext()>"<.> <:>"<&file2.absfileW()>"<.>;
}


sub mkJunction(Filepath file1, Filepath file2) {
  start cmd.exe /C start cmd.exe /C mkJuction.bat <:><&file1.absdirW()><.> <:><&file2.namext()><.> <:><&file2.absfileW()><.>;
}

sub setwr_dirtree() {
  ##cmd cmd.exe /C start cmd.exe /C dj.bat <:>"<&file1>"<.> <:>"<&file2>"<.>;
  cmd cmd.exe /C attrib -r /s *.*;
}

sub diff_view(String file1, String file2) {
  ##cmd cmd.exe /C start cmd.exe /C dj.bat <:>"<&file1>"<.> <:>"<&file2>"<.>;
  ##cmd cmd.exe /C start dj.bat <:>"<&file1>"<.> <:>"<&file2>"<.>;
  start c:\Programs\WinMerge-2.12.4-exe\WinMerge.exe <:>"<&file1>"<.> <:>"<&file2>"<.>;
}

sub kdiff3(String file1, String file2) {
  start C:/Programs/Kdiff3/kdiff3.exe <:>"<&file1>"<.> <:>"<&file2>"<.>;
}

sub notepadpp(String file1, String file2) {
  start cmd.exe /C ed++.bat <:>"<&file1>"<.>;
}


sub WindowsProcessExplorer(String file1){
  start c:\Programs\WindowsTools\procexp64.exe;
}



class Filelist{
  sub list(String dir1){
    java org.vishia.util.FileList.list(dir1.toString(), "**/*", ".filelist.lst");
  }


  sub touch(Obj file1){
    java org.vishia.util.FileList.touch(file1.toString(), null, null);
  }
} //Class Filelist



class git {


  sub status(Obj file1) { call git.__gitcmd__(startFileSearchRepository=file1, cmdgit="status"); }
  
  ##sub log(Obj dir1) { call git.__gitcmd__(dir=dir1, cmdgit="log"); }
  sub gitgui_vishia(Obj file1) { java org.vishia.gitGui.GitGui.showLog(file1); }
  
  sub add(Obj file1) { 
    call git.__gitcmd__(startFileSearchRepository=file1, cmdgit="add", file1=file1); 
  }
  
  sub moveto(Obj listfiles1, String dir2) {
    call git.__gitcmd__(startFileSearchRepository = dir2, cmdgit="mv", filelist=listfiles1, file1=dir2);  
    for(file: listfiles1) {
      <+>move <&file><.+n>
    }
  }
  
  sub renmove_inMirror(String dir1, String file1, String file2) {
    ##file1 is the source in the mirror, existing. file2 is the new place in mirror, taken from working tree
    call git.__gitcmd__(startFileSearchRepository = file2, cmdgit="mv", file1=file1, file2 = file2);  
  }
  
  sub resync_repo(String dir1) {
    String dir = dir1;
    cd &dir;
    cmd cmd.exe /C start cmd.exe /K gitc.bat checkout --force;
  }  

  sub gui(String dir1) {
    String dir = dir1;
    cd &dir;
    ##cmd cmd.exe /C cmd.exe /C unix_cmd.bat <:>"gitk"<.>;
    ##cmd cmd.exe /C start cmd.exe /K unix_cmd.bat <:>"gitk"<.>;
    cmd cmd.exe /C start git_script.bat <:>"gitk"<.>;
  }  
  
  sub push(String file1, String file2) {
    cd &file1;
    ##cmd cmd.exe /C start cmd.exe /K gitc.bat push  --all <:><&file2>/.git<.>;
    ##select the .git file.
    cmd cmd.exe /C start cmd.exe /K gitc.bat push  --all <:><&file2><.>;
  }


  
  
  ##This is the core routine for git commands.
  ##It searches the repository given by .git directory in parents or .gitrepository file content.
  ##The command line output is shown in the info box of the.File.commander
  ##arg startFileSearchRepository: A file which's dir is used to search the .repository or .git
  ##arg cmdgit unix cmd prepared 
  ##arg file1 if given then one file to handle in git. The relative path from the base directory of git is built.
  ##arg file2 if given then second file to handle in git. The relative path is built adequate the file1.
  ##          it is possible that file2 is in another file tree. 
  ##
  sub __gitcmd__(Obj startFileSearchRepository, String cmdgit, Obj file1=null, Obj file2=null, Obj filelist=null) {
    Obj guicfg = java org.vishia.gral.area9.GuiCfg.get();  ##singleton from running app
    guicfg.showInfoBox(<:>_gitCmd:<&cmdgit><.>);
    ##Obj filePathRepository = java org.vishia.util.FileSystem.searchInParent(dir, ".gitRepository", ".git");
    Obj filePathRepository = java org.vishia.gitGui.GitGui.getFilePathRepository(startFileSearchRepository);
    if(not filePathRepository){ guicfg.appendTextInfoBox(<:> ==>Error: gitCmd:<&cmdgit>, repository not found from <&startFileSearchRepository><.>); }
    else {
      String gitRepository;
      String baseFiles;
      if(filePathRepository.getName() == ".git") {
        gitRepository = java org.vishia.util.FileSystem.getCanonicalPath(filePathRepository);  //it is the .git dir!
        baseFiles = <:><&java org.vishia.util.FileSystem.getCanonicalPath(filePathRepository.getParentFile())><.>;
      } else {
        gitRepository = java org.vishia.util.FileSystem.readFile(filePathRepository);
        baseFiles = java org.vishia.util.FileSystem.getCanonicalPath(filePathRepository.getParentFile());
      }
      <+>git at: <&gitRepository><.+n>
      cd &baseFiles
      String pathFile;
      if(file1) {
        pathFile = java org.vishia.util.FileSystem.relativatePath(file1.toString(), <:><&baseFiles>/<.>);
      } else {
        pathFile = "";
      }
      String pathFile2 = "";
      if(file2){
        Obj filePathRepository2 = java org.vishia.util.FileSystem.searchInParent(file2, ".gitRepository", ".git");
        if(not filePathRepository2){ guicfg.appendTextInfoBox(<:>Error: gitCmd:<&cmdgit>, repository-2 not found from <&file2><.>); }
        else {
          String baseFile2 = java org.vishia.util.FileSystem.getCanonicalPath(filePathRepository2.getParentFile());
          pathFile2 = java org.vishia.util.FileSystem.relativatePath(file2.toString(), <:><&baseFile2>/<.>);
        }
      }
      String pathSomeFiles;
      if(filelist) {
        Stringjar a; 
        for(file: filelist) {
          String filepath = java org.vishia.util.FileSystem.relativatePath(file.toString(), <:><&baseFiles>/<.>);
          a += <:>'<&filepath>' <.>;
        }
        pathSomeFiles = a; 
      } else {
        pathSomeFiles = "";
      }
      Stringjar outcmd;
      ##only one argument for the unix_cmd.bat
      String gitcmd = <:>"git --git-dir=<&gitRepository> <&cmdgit> <&pathSomeFiles> <&pathFile> <&pathFile2>"<.>;
      <+>unix_cmd: <&gitcmd><.+n>
      outcmd += cmd cmd.exe /C unix_cmd.bat &gitcmd;
      outcmd.setParttoMax();
      guicfg.appendTextInfoBox(outcmd);
      ##String windowTitle = <:>Git <&cmdgit>, cmdgit: <&startFileSearchRepository><.>;
      ##String gconfig = 
      ##<:>
      ##  @2+2,2+60: Text("<&cmdgit>: <&startFileSearchRepository>");
      ##  @4..-2,2..-2:InputBox("test");
      ##<.>;
      ##debug;
      ##Obj window = java org.vishia.gral.cfg.GralCfgWindow.createWindow(<:>git-<&cmdgit><.>, windowTitle, gconfig, jzcmdsub.currdir, jzcmd.log);                 
      ##window.setTextIn("test", outcmd);
    }
  }  

  
} //class git




