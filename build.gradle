apply plugin: 'java'
apply plugin: 'org.asciidoctor.convert'

                                                                
version='2020-04-04'
//archiveVersion='xxx'

def version_vishiaBase='2020-04-04'

def pathSep = ';'  //adapt for linux to ':' TODO detect OS, is there a gradle-feature?

buildscript {
    repositories {
       jcenter()
    }

    dependencies {
        //dedicated files, missing some:
        //classpath files ('C:/programs/gradle/jars/asciidoctorj-1.5.6.jar', 'C:/programs/gradle/jars/asciidoctor-gradle-plugin-1.5.6.jar')
        //loaded and stored in C:/User/.../.gradle/caches
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'
        //does not work: classpath 'org.asciidoctor:AsciiDoctorj-pdf:1.5.0'
    }
}


//sourceSets {
//  external {
//    java {
//      srcDir "$projectDir/."
//      include "xxxsrc/mainxxx/java/org/vishia/checkDeps_C/CheckDeps.java"
//    }
//  }
//  main {                                             
//    java {
//      compileClasspath += external.classes
//    }                                                             
//  }                                                  
//}
//

sourceSets {
  main {
    java {  //note: include definitiv the main/resources and main/java, no more from main.
            srcDirs = ['src/main/java', '../cmpnJava_vishiaRun/src/main/java']
         }                                       
    resources { //Note: The resources are part of the java source tree, not extra
         //gradle seems to include all files except *.java as resource into the jar file 
         //  in the same directory as class files, like necessary for resources.
         srcDirs = ['src/main/java']                                                                   
         //filter = '*.zbnf'    //faulty syntax, not necessary                                                                   
    }                                                                 
  }

  test {
    java {
       srcDirs = ['src/test/java']
    }
  }                            
}


//processResources (type:Copy) {
//   from('src/main/java') {
//        include '**/*.zbnf'
//        include '**/*.xml'
//    }
//    into 'build/resources/main'
//}




task jcc_main(type: Exec) {
  workingDir 'src/main/java/_make'
  
  environment('TMPJAVAC', '../../../../build/javac')
  def JAR_vishiaBase = '../../../../../cmpnJava_vishiaBase/deploy/vishiaBase-' + 
                       version_vishiaBase + '.jar'
  environment('JAR_zipjar', JAR_vishiaBase)
  environment('VERSION', version)         
  environment('TIME', "")                //use timestamp from makejar.sh
  environment('DEPLOY', '../../../../deploy/vishiaGui-')
  environment('CLASSPATH', 
    '../../../../libs/org.eclipse.swt.win32.win32.x86_64_3.110.0.v20190305-0602.jar'
    + pathSep + JAR_vishiaBase)
  environment('RESOURCEFILES', '..:**/*.zbnf ..:**/*.xml')  
  environment('SRCPATH', '..;../../../../../cmpnJava_vishiaRun/src/main/java')  
  environment('MANIFEST', 'vishiaGui.manifest')  //located in the workingDir
  environment('SRC_ALL', '..')  //located in the workingDir
  //Note: 2 source-sets
  environment('SRC_ALL2', '../../../../../cmpnJava_vishiaRun/src/main/java')
  //standardOutput = new FileOutputStream("build/javac.out.txt")
  executable 'sh'
  args '-c', './makejar.sh'
}

                                               

task srcZip(type: Zip) {
  dependsOn jcc_main
    archiveFileName = 'vishiaGui-'+version+'-source.zip'
    //destinationDirectory = file("$buildDir/libs")
    destinationDirectory = file("deploy")

    from "src/main/java"
    from "../cmpnJava_vishiaRun/src/main/java"
    include "_make/*"
    include "org/**/*"
    include "libs/*"

}


asciidoctor {
  dependsOn srcZip
  sourceDir = file('src/docs/asciidoc')
  outputDir = file('.')  //create a dir html5
  //backends = ['html', 'pdf']
}



test {                                                                                                 
  dependsOn asciidoctor

}



//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}

//defaultTask 'asciidoctor'


